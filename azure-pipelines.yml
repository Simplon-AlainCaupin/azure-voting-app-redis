trigger:

- master

pool:
  vmImage: ubuntu-latest

stages:

# - stage: Build_docker_image
#   displayName: Build docker image 
#   jobs:

#   - job: Get_Version
#     displayName: Get Version Build 
#     pool:
#       vmImage: ubuntu-latest 
#     steps:

#     - task: CmdLine@2
#       displayName: Comparaison version application
#       inputs:
#         script: |
#           versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
#           versionold=$(curl -s http://lain-brief8.westeurope.cloudapp.azure.com | grep -o 'Azure Voting App v[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/^.*v//;s/ on.*$//' | head -n1)
#           echo "##vso[task.setvariable variable=verold]$versionold"
#           echo "##vso[task.setvariable variable=vernew]$versionnew"
  
#     - task: Docker@2
#       name: CreateDockerImage
#       displayName: create dockerhub image
#       condition: ne(variables.verold,variables.vernew)
#       inputs:
#         containerRegistry: 'container-connection'
#         repository: 'alaincpn/voteapp'
#         command: 'buildAndPush'
#         Dockerfile: 'Dockerfile'
#         tags: 'latest'

- stage: Test_Deployment
  displayName: testdep
  jobs:
  - job: Test_Deploy
    displayName: Deploy on Test 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:

    - task: KubernetesManifest@0
      name: kuberneTest
      displayName: deploy on testing ns
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aks-connection'
        namespace: 'testenv'
        manifests: '**/app/test/*'

    - task: Bash@3
      name: waitingfordeploy
      condition: succeeded()
      displayName: waiting for deployment
      inputs:
        targetType: 'inline'
        script: 'sleep 1'

    # - task: CmdLine@2
    #   name : testcharge
    #   displayName: Test charge sur qal
    #   inputs:
    #     script: |
    #       seq 250 | parallel --max-args 0  --jobs 20 "curl -k -iF 'vote=free' http://lain-brief8.westeurope.cloudapp.azure.com"

    # - task: CmdLine@2
    #   name: waitforcharge
    #   inputs:
    #     script: 'sleep 60'

    # - task: Kubernetes@1
    #   name : recupNbPods
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceEndpoint: 'aks-connection'
    #     namespace: 'qal'
    #     command: 'get'
    #     useConfigurationFile: true
    #     configuration: './app/qal/app.yml'
    #     secretType: 'dockerRegistry'
    #     containerRegistryType: 'Azure Container Registry'

    # - task: CmdLine@2
    #   name: nbpod
    #   inputs:
    #     script: |
    #       nbrpod=$(echo $RECUPNBPODS_KUBECTLOUTPUT | jq '.items[0].spec.replicas')
    #       echo $nbrpod
    #       echo "##vso[task.setvariable variable=podnumber;isOutput=true]$nbrpod"
    # - task: CmdLine@2
    #   condition: ne(variables['podnumber'],2)
    #   name: scalework
    #   inputs:
    #     script: echo 'Scaling complete'

- stage: dependency_check
  displayName: Run dependency check
  jobs:

  - job: dep_check
    displayName: Dependency check
    
    steps:
      # - task: dependency-check-build-task@6
      #   inputs:
      #     projectName: 'SecurityScan'
      #     scanPath: '**'
      #     format: 'JUNIT'
      #     reportFilename: 'testreport'
      #     failOnCVSS: '8'
      #     additionalArguments: 

      # - task: CmdLine@2
      #   displayName: check-nb-dependencies
      #   inputs:
      #     script: |
      #       resultest="$(cat /home/vsts/work/1/TestResults/dependency-check/testreport/dependency-check-junit.xml)"
      #       echo "#####DEBUG#####"
      #       echo $resultest
      #       echo "##vso[task.setvariable variable=restest]$resultest"

      # - task: PublishTestResults@2
      #   inputs:
      #     testResultsFormat: 'JUnit'
      #     testResultsFiles: '/home/vsts/work/1/TestResults/dependency-check/testreport/dependency-check-junit.xml'
      #     failTaskOnFailedTests: true

      - task: CmdLine@2
        inputs:
          script: |
            chmod -R 777 ./
            docker run --rm -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://lain-brief8.westeurope.cloudapp.azure.com/:80 -x report.xml
            true
        displayName: "Owasp Container Scan"

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $XslPath = "./xml_to_nunit.xslt" 
            $XmlInputPath = "report.xml"
            $XmlOutputPath = "test-results.xml"
            $XslTransform = New-Object System.Xml.Xsl.XslCompiledTransform
            $XslTransform.Load($XslPath)
            $XslTransform.Transform($XmlInputPath, $XmlOutputPath)
        displayName: "PowerShell Script"

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: './test-results.xml'
          failTaskOnFailedTests: true
          
- stage: 'manualvalidationcheck'
  condition: failed('dependency_check')
  dependsOn:
  - dependency_check
  displayName: 'Actions suite résultat tests' 
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 7800
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 7800
      inputs:
        notifyUsers: |
          simplon.alaincaupin@gmail.com
        instructions: 'Merci de valider le déploiement'
        onTimeout: 'resume'

- stage: QAL_Deployment
  condition: succeeded('manualvalidationcheck')
  displayName: qaldep
  jobs:
  - job: QAL_Deploy
    displayName: Deploy on QAL 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:

    - task: KubernetesManifest@0
      name: kuberneTest
      displayName: deploy on Qal ns
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'aks-connection'
        namespace: 'qal'
        manifests: '**/app/qal/*'