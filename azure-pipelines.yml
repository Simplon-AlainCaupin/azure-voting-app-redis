# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
- stage: kubesetup
  jobs:
  - job: connectkube
    steps:

    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aks-connection'
        namespace: 'qal'
        command: 'get'
        arguments: 'deployments'
        secretType: 'dockerRegistry'
      name: "kubs"
  - job: getvars
    dependsOn: 
    - connectkube
    condition: succeeded()
    steps:
      - task: CmdLine@2
        inputs:
          script: |
            ls -ll
            echo "------"
            dockerhubversion=$((curl 'https://hub.docker.com/v2/repositories/alaincpn/voteapp/tags' | jq '."results"[0]["name"]')| sed 's/\"//g')
            echo "Version sur dockerhub : "
            echo $dockerhubversion
            kubeoutputversion=$(echo $KUBS_KUBECTLOUTPUT | jq '.items[1].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
            echo "Version output kubectl : "
            echo $kubeoutputversion
            scriptversion=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
            echo "Version dans le script : "
            echo $scriptversion
            echo "##vso[task.setvariable variable=dockversion]$dockerhubversion"
            echo "##vso[task.setvariable variable=kubeoutpversion]$kubeoutputversion"
            echo "##vso[task.setvariable variable=scrversion]$scriptversion"
            sed -i 's/{{ version }}/'$scriptversion'/g' app/app.yml
        name: vers
    # - task: Bash@3
    #   inputs:
    #     filePath: 'qalscript.sh'


# Appel du script de récupération des variables dans le job getversionvars
# qalscript.sh sur le repo

- stage: dockerimage
  dependsOn:
  - kubesetup
  condition: succeeded()
  displayName: dockerimage
  jobs:
  - job: qaldeploy
    variables:
      oldversion: $[ stageDependencies.kubesetup.getvars.outputs['vers.kubeoutpversion'] ]
      newversion: $[ stageDependencies.kubesetup.getvars.outputs['vers.scrversion'] ]
    displayName: qaldeploy
    pool:
      vmImage: ubuntu-latest 
    steps:

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "outputs"
          echo $kubeoutpversion
          echo $scrversion
    # - task: Docker@2
    #   condition: ne(variables.verrep,variables.vernew)
    #   inputs:
    #     containerRegistry: 'container-connection'
    #     repository: 'alaincpn/voteapp'
    #     command: 'buildAndPush'
    #     Dockerfile: 'Dockerfile'
    #     tags: $(newversion)
    #   name: "dockerup"





      # steps:
      # - task: Docker@2
      # inputs:
      #   containerRegistry: 'container-connection'
      #   repository: 'alaincpn/voteapp'
      #   command: 'buildAndPush'
      #   Dockerfile: 'Dockerfile'

      # - task: KubernetesManifest@0
      #   name: qaldeploy
      #   displayName: 'qaldeploy'
      #   condition: ne(variables['kubeoutpversion'],variables['scrversion'])
      #   inputs:
      #     action: 'deploy'
      #     kubernetesServiceConnection: 'aks-connection'
      #     namespace: 'qal'
      #     manifests: 'app/app.yml'
      #     rolloutStatusTimeout: '60'

  # - job: qalhasfailed
  #   dependsOn: qaldeploy
  #   condition: failed()
  #   steps:
  #     - script: echo "Qal has failed !"

  # - job: qalhaspassed
  #   dependsOn: qaldeploy
  #   condition: succeeded()
  #   steps:
  #     - script: echo "Qal has passed !"
  
  # - job: kubecanary
  #   dependsOn: qalhaspassed
  #   steps:
  #   - task: KubernetesManifest@0
  #     name: kubecanary
  #     condition: ne(variables['kubeoutpversion'],variables['scrversion'])
  #     inputs:
  #       action: 'deploy'
  #       kubernetesServiceConnection: 'aks-connection'
  #       namespace: 'prod'
  #       strategy: 'canary'
  #       percentage: '10'
  #       manifests: 'app/app.yml'
  #       rolloutStatusTimeout: '60'